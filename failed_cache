class LRUCache:

    def __init__(self, capacity: int):
        self.capacity=capacity
        self.queue = []
        self.value = {}
        self.posi = {}
        self.queue_set = set()
    def get(self, key: int) -> int:
        # print (key, self.queue, self.posi)
        if key in self.queue_set:
            res = self.value[key]
            posi = self.posi[key]
            for x in self.queue[posi+1:]:
                self.posi[x]-=1
            self.queue.pop(posi)
            self.queue.append(key)
            self.posi[key]= len(self.queue)-1
        else:
            res = -1
        return res

    def put(self, key: int, value: int) -> None:
        if key in self.queue_set:
            self.value[key]=value
            posi = self.posi[key]
            self.queue.pop(posi)
            self.queue.append(key)
            if len(self.queue)>self.capacity:
                self.queue.pop(0)
            for x in self.queue[posi+1:]:
                self.posi[x]-=1
            self.posi[key]=len(self.queue)-1
        else:
            self.queue.append(key)
            self.value[key]=value
            if len(self.queue)>self.capacity:
                tmp = self.queue[0]
                for x in self.queue[:-1]:
                    self.posi[x]-=1
                print (self.queue)
                print (self.queue_set)
                self.queue.pop(0)
                self.queue_set.remove(tmp)
                del self.value[tmp]
            self.posi[key]=len(self.queue)-1
            self.queue_set.add(key)
            
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

